# syntax=docker/dockerfile:1.5

# This is for hosting a pypiserver https://github.com/pypiserver/pypiserver#quickstart-installation-and-usage

# Install dependencies stage --------------------------------------------------
FROM python:3.10 AS base

# install virtual environment
RUN mkdir /packages && \
    python -m venv /opt/venv

ENV PATH="/opt/venv/bin:${PATH}"

# copy source files
COPY . /flotta

RUN python -m pip install --upgrade pip \
    && \
    pip install "/flotta" build 

# download a list of all required packages
RUN python -m build --outdir /packages /flotta

RUN --mount=type=cache,target=/root/.cache \
    cd /packages \
    && \
    pip freeze list > packages.txt \
    && \
    pip download -r packages.txt
#     && \
#     pip download -r packages.txt \
#         --only-binary=:all: \
#         --platform win_amd64 \
#     && \
#     pip download -r packages.txt \
#         --only-binary=:all: \
#         --platform manylinux1_x86_64 \
#         --platform manylinux_2_5_x86_64 \
#         --platform manylinux_2_12_x86_64 \
#         --platform manylinux_2_17_x86_64 \
#         --platform manylinux_2_28_x86_64 \
#         --platform manylinux2010_x86_64 \
#         --platform manylinux2014_x86_64 \
#         --platform any

# Build stage -----------------------------------------------------------------
FROM python:3.10 AS builder

# install virtual environment
RUN python -m venv /opt/venv

ENV PATH="/opt/venv/bin:${PATH}"

RUN python -m pip install --upgrade pip

# install pypiserver
RUN pip install pypiserver

# Installation stage ----------------------------------------------------------
FROM python:3.10-slim-buster

# copy built virtual environment to base
COPY --from=builder /opt/venv /opt/venv

ENV PATH="/opt/venv/bin:${PATH}"

# create and populate workdir
WORKDIR /repository

RUN mkdir /packages

COPY --from=base /packages /packages

EXPOSE 8080

ENTRYPOINT ["pypi-server", "run", "-p", "8080", "--log-stream", "stdout", "/packages"]
